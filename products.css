document.addEventListener('DOMContentLoaded', () => {

    const slideData = [
        { title: "Kompozit Izgara", description: "Yüksek dayanımlı kompozit malzemeden üretilmiş, korozyona ve ağır yüklere karşı maksimum direnç gösteren yenilikçi ızgara çözümü.", cardImage: "resim/60x80.png", backgroundImage: "resim/ap7.png" },
        { title: "Rögar Kapağı", description: "Kent estetiğine uygun, sessiz ve güvenli bir kullanım sunan, en son teknoloji ile üretilmiş yeni nesil rögar kapağı.", cardImage: "resim/100x100.png", backgroundImage: "resim/ap8.png" },
        { title: "Ek Odası", description: "Farklı projelere kolayca uyum sağlayan, montajı pratik ve esnek modüler altyapı elemanları.", cardImage: "resim/ekodası.png", backgroundImage: "resim/ap9.png" },
        { title: "Modüler Izgara", description: "Farklı projelere kolayca uyum sağlayan, montajı pratik ve esnek modüler altyapı elemanları.", cardImage: "resim/60x60y.png", backgroundImage: "resim/ap2.png" },
        { title: "Kare Rögar Kapağı", description: "Farklı projelere kolayca uyum sağlayan, montajı pratik ve esnek modüler altyapı elemanları.", cardImage: "resim/60x60.png", backgroundImage: "resim/arkaplan1.png" },
        { title: "Dikey Izgara", description: "Farklı projelere kolayca uyum sağlayan, montajı pratik ve esnek modüler altyapı elemanları.", cardImage: "resim/45x60y.png", backgroundImage: "resim/ap5.png" },
        { title: "Standart Izgara", description: "Farklı projelere kolayca uyum sağlayan, montajı pratik ve esnek modüler altyapı elemanları.", cardImage: "resim/ızgara.png", backgroundImage: "resim/ap4.png" },
        { title: "Geniş Rögar Kapağı", description: "Farklı projelere kolayca uyum sağlayan, montajı pratik ve esnek modüler altyapı elemanları.", cardImage: "resim/80x8hata.png", backgroundImage: "resim/ap6.png" }
    ];

    // --- HTML ELEMENTLERİNİ SEÇME ---
    const showcase = document.querySelector('.showcase');
    const bgSlider = document.querySelector('.background-slider');
    const textRotator = document.querySelector('.text-rotator');
    const swiperWrapper = document.querySelector('.swiper-wrapper');
    const timelineNav = document.querySelector('.timeline-nav');
    
    // Gerekli elemanların varlığını kontrol et
    if (!showcase || !bgSlider || !textRotator || !swiperWrapper || !timelineNav) {
        console.error('products.js: Gerekli HTML elemanlarından biri bulunamadı! Lütfen HTML yapısını kontrol edin.');
        return;
    }

    // --- DEĞİŞKEN TANIMLAMA ---
    let currentIndex = 0;

    // --- İÇERİĞİ DİNAMİK OLARAK OLUŞTURMA ---
    slideData.forEach((data, index) => {
        // Arka plan resmi
        const bgImg = document.createElement('img');
        bgImg.src = data.backgroundImage;
        bgSlider.appendChild(bgImg);
        
        // Metin slaytı
        const textSlide = document.createElement('article');
        textSlide.classList.add('content-slide');
        textSlide.innerHTML = `<h1>${data.title}</h1><p>${data.description}</p>`;
        textRotator.appendChild(textSlide);
        
        // Swiper slaytı (ürün kartı)
        const swiperSlide = document.createElement('div');
        swiperSlide.classList.add('swiper-slide');
        swiperSlide.innerHTML = `<img src="${data.cardImage}" alt="${data.title}">`;
        swiperWrapper.appendChild(swiperSlide);
        
        // Navigasyon noktası (masaüstü için)
        const dot = document.createElement('button');
        dot.classList.add('dot');
        dot.dataset.index = index;
        timelineNav.appendChild(dot);
    });
    
    // Oluşturulan elementleri tekrar seç (yeni eklenenler için)
    const bgImages = document.querySelectorAll('.background-slider img');
    const textSlides = document.querySelectorAll('.content-slide');
    const navDots = document.querySelectorAll('.dot');

    // --- SWIPER KÜTÜPHANESİNİ BAŞLATMA ---
    const swiper = new Swiper('.swiper', {
        effect: 'coverflow', // Masaüstü için Coverflow efekti
        grabCursor: true,
        centeredSlides: true,
        slidesPerView: 'auto',
        loop: true,
        coverflowEffect: {
            rotate: 0,
            stretch: 50,
            depth: 250,
            modifier: 1,
            slideShadows: false,
        },
        navigation: {
            nextEl: '.next-btn',
            prevEl: '.prev-btn',
        },
        on: {
            init: function () { // Swiper başlatıldığında çalışır
                updateContent(this.realIndex); // İlk slaytı göster
                if (showcase) showcase.classList.add('is-loaded'); // Ana gösteriyi yüklenmiş yap
            },
            slideChange: function () { // Slayt değiştiğinde
                updateContent(this.realIndex); // İçeriği ve göstergeyi güncelle
            },
        },
    });
    
    // Nokta navigasyonuna tıklama olayı
    navDots.forEach(dot => {
        dot.addEventListener('click', () => {
            const index = parseInt(dot.dataset.index, 10);
            swiper.slideToLoop(index); // Tıklanan noktaya git
        });
    });

    // İçerik güncelleme fonksiyonu
    function updateContent(index) {
        // Eğer zaten o slayt aktifse veya slayt yoksa çık
        if (currentIndex === index && showcase.classList.contains('is-loaded')) return; 
        
        // Önceki aktif elemanlardan sınıfları kaldır
        if (bgImages[currentIndex]) bgImages[currentIndex].classList.remove('is-active');
        if (textSlides[currentIndex]) textSlides[currentIndex].classList.remove('is-active');
        if (navDots[currentIndex]) navDots[currentIndex].classList.remove('is-active');

        // Yeni slayt için sınıfları ekle
        if (bgImages[index]) bgImages[index].classList.add('is-active');
        if (textSlides[index]) {
            textSlides[index].classList.add('is-active');
            // Metin alanının yüksekliğini, yeni metne göre ayarla
            textRotator.style.height = `${textSlides[index].scrollHeight}px`;
        }
        if (navDots[index]) navDots[index].classList.add('is-active');
        
        // Mevcut indeksi güncelle
        currentIndex = index;
    }
    
    // Pencere yeniden boyutlandırıldığında metin alanının yüksekliğini ayarla
    window.addEventListener('resize', () => {
        if (textSlides[currentIndex]) {
            textRotator.style.height = `${textSlides[currentIndex].scrollHeight}px`;
        }
    });
});
